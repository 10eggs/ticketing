$npm init -y // all default on YES
$npm install typescript ts-node-dev express @types/express

$tsc --init


#This time we are running Kubernetess stuff directly, straight after creation of new service
warning: LF will be replaced by CRLF in ticketing/auth/package-lock.json.
The file will have its original line endings in your working directory
warning: LF will be replaced by CRLF in ticketing/auth/package.json.
The file will have its original line endings in your workingss





#If you did not see your server restart after changing the index.ts file, do the following:
#Open the package.json file in the ‘auth’ directory
#Find the ‘start’ script
#Update the start script to the following:
$ts-node-dev --poll src/index.ts

#To run skaffold
$skaffold dev

#To prevent problem with cert in chrome
$thisisunsafe

#Remove dir from git
$git rm -r --cached myFolder

#To interact between TS and Mongoose we need to write some custom code as mongoose doesn't support TS natively

#Mongoose User Model - Represents the entire colletion of users
#Mongoose User Document - Represents one single user
#Initially there is no check against constructor properties, which means you can do typo in property name for example and TS will not complain

#Creating User Model
#1. Create scheme - tell mongoose specifically about all the different properties that model will going to have
#2. Create a model in MongoDB
#3. ISSUE no1: When I'll try to create User object with passing any arguments, there is no check provided by TS, so I can do a mistake by passing wrong arguments
#4. Solution - create an interface which describe constructor properties. Next, use new build() function to use interface
#5. build() function need to be connected to User model. We can achieve it by add 'static' property to the model
#6. Initially, we'll end up with error - TS doesn't understand what does it mean to assign a property to a static object
#7. Hence we need to boost our Model to be aware of this function
#8. Solution - introduce another interface to describe what properties our User model should have
#9. In UserModel interface we are introducing GENERICS
#10. After that our mongoose.model will have two generic arguments - any and UserModel
#11. ISSUE no2: Let's say I'd like to print my UserDocument in console - it shows me all properties, even these ones which are added by mongoose automatically.
#12. Solution: Introduce interface for User Document
#13. 

#Hashing Password
#1. Signup process
#2. Create salt
#3. Buffer - raw array of byte inside of it